/**
@page overview Overview

@section standard-io Standard I/O
This library includes native support for `printf` and `scanf`-like functions. For these to work, you have to initialize the USB terminal using @ref usb_terminal_init. This automatically initializes `stdout`, `stderr` and `stdin`.

After initializing the USB terminal, you can use `printf` and `scanf` just like you would with a terminal application.

@section error-handling Error handling
Because C does not natively support throwing errors (other than the very rudimentary `setjmp` and `longjmp`), this library also includes a try-catch implementation done with preprocessor macros.

@note You will have to initialize the error handling functionality using @ref error_init.

This is an example of the usage of this block:
@code{.c}
try {
    // Put some error-prone code here
	   // Throw an error using the throw or the throwMessage macro
} catch {
    // Error handler
    // Called if the above error handler has not caught anything
}
@endcode

If you want to process the error information further,
you can use the @ref catchError macro:
@code{.c}
try {
    // Put some error-prone code here
	   // Throw an error using the throw or the throwMessage macro
} catchError(Error_t error) {
    // Error handler
    // The error information is in the 'error' variable
}
@endcode

If you don't wrap error-prone code in a try-catch wrapper, thrown errors
are caught globally and the execution of your application stops. The only way to resume the execution of the 
program in such a case is resetting the microcontroller.

This implementation should be safe to use multiple times in the same scope. Nested
try-catch blocks are also allowed.

Note that any errors thrown in the `catch` block are handled by the higher-level error handler, i.e. a
higher-level try-catch-block or the global error handler. Any error thrown in the `catch` block are
handled the same way as errors thrown right outside the `catch` block.

Any code after `throw` or `throwMessage` is unreachable, i.e. will never by executed.

Under the hood, this works with the global @ref _error_h_currentJmpBuf variable. It always stores
a pointer to the the `jmp_buf` of the currently active try-catch-block, or the `jmp_buf` of the global
error handler. If you now create a new try-catch-block, @ref _error_h_currentJmpBuf is updated while
storing the previous value in `_error_h_previousJmpBuf`. If you now close the block with the `catch`
macro, @ref _error_h_currentJmpBuf is reset to the previous state and any further errors go to the
higher-level try-catch-block (or the global error handler if no higher-level try-catch-block exists).

@section unit-handing Scientific unit handling
@ref si_units.h includes routines for handling physical quantities (associated with units). This library allows you to use and convert
physical quantities with their specific precisions easily.

The library works with the concept of significant digits. The significant digits of a number are all digits, before or after the decimal point,
not including leading zeros. Trailing zeros count as additional precision and are therefore also counted.

You can create a quantity using the @ref SI function. You will *have to* pass the precision of the number you are passing,
so that the precision can be taken into account when outputting it to the console.

When outputting a quantity to the console, the precision is taken into account. Only the specified number of significant digits
will be outputted, no more and no less.

For a reference of the pre-defined units, as well as the related functions, please refer to the file reference of @ref si_units.h.

*/